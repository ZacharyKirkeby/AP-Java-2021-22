Instructions
You are going to write a class that contains state using instance variables.

You will write a class that represents an analogue radio like you would see in a car, or on a really cool boombox from the 90's.

Radios are tuned to a frequency, like 90.9 or 107.7.

When you turn the dial, you change the frequency by 0.2.

You will use an instance variable to keep track of the frequency of your Radio object and you will write methods that allow that frequency to be manipulated.

Part 1: Write the class header
Write a class header in the Radio.java file.

Use the name of the file to determine what the name of the class should be.

Part 2: Writing an Instance Variable
Objects can keep track of information using instance variables. Instance variables are just like any other variables you have used before, except they are declared within the scope of the class (rather than the scope of a method) and you use the keyword private when declaring them.

public class NAME
{
  private int num;
  private String word;
}
The example above shows a class that declares two instance variables. These instance variables can be used in any of the methods in this class, because they are declared in the scope of the class, which is the same scope that all the methods will be declared in.

Declare an instance variable in the Radio class to represent the frequency that the radio is tuned into.

What should the data type of this variable be? Remember, it needs to store data like 90.9 and 107.7 and you are going to want to do math with it.
What is a good name for this variable? It represents the frequency that the radio is tuned in to. What would be a good name for that data?
Don't for get to use the private keyword when declaring this variable!
Do not assign an initial value to an instance variable!
Make sure your code compiles. You can't test it until you write the method from Part 3, but it should compile without any errors.

Part 3: Writing a Getter Method
A Getter Method is a method that "gets" the value of an instance variable from an object.

Write the method getStation that takes no parameters and returns the value of the instance variable you just created. (The return type of this method should be the same as the variable type of your instance variable)

If your instance variable was named freq then the body of this method would return freq;

Getter methods are very simple, they just return the value of an instance variable.

Make sure your code compiles.

To test this code you will have to uncomment some lines in the RadioTester.java file.

Look for the lines

//Radio r = new Radio();
//System.out.println(r.getStation()); // should be 0.0
And remove the // from the beginning of them so they look like this:

Radio r = new Radio();
System.out.println(r.getStation()); // should be 0.0
Now, when you run your code it should output the value 0.0 to the console (as indicated by the comment)

Part 4: Writing a Setter Method
Setter methods are used to set the value of an instance variable. They take a parameter and use that parameter to assign a value to the instance variable. The type of the parameter variable must match the type of the instance variable.

Write the method setStation that takes one parameter and returns nothing. The type of the parameter should match the type of your instance variable. You can name the parameter anything you want, but you should NOT give it the same name as the instance variable.

If the instance variable name is freq I like to name the parameter f. Normally, f would not be a good variable name, but when used in a setter method, it can be obvious which instance variable it will be used to set.

The body of the setter method should assign the value of the parameter to the instance variable. Remember, the syntax for assignment is:

variableChanging = valueBeingAssigned;
The variable that you are changing goes first, then the value that you are assigning to that variable goes second.

Once you have written this method, make sure your code compiles.

To test this code you will have to uncomment some lines in the RadioTester.java file.

Look for the lines

//r.setStation(95.5);
//System.out.println(r.getStation()); // should be 95.5
And remove the // from the beginning of them so they look like this:

r.setStation(95.5);
System.out.println(r.getStation()); // should be 95.5
Now, when you run your code it should output the values

0.0
95.5
When the code calls the setStation method, it changes the value of the instance variable.

Part 5: Mutator Method
Mutator methods are used to change the value of an instance variable.

The difference between a mutator method and a setter method is that the mutator method modifies the instance variable. It changes the value of the instance variable in relation to itself. The setter method just changes the value of the instance variable to something new.

Write a mutator method called changeStation that does not return anything but takes one parameter. The parameter should be a double, and you can name it anything you want (but don't reuse the instance variable name)

The body of this method should add the value of the parameter to the instance variable.

That's it!

Make sure your code compiles.

To test this code you will have to uncomment some lines in the RadioTester.java file.

Look for the lines

//r.changeStation(1.4);
//System.out.println(r.getStation()); // should be 96.9
And remove the // from the beginning of them so they look like this:

r.changeStation(1.4);
System.out.println(r.getStation()); // should be 96.9
Now, when you run your code it should output the values

0.0
95.5
96.9
When the code calls the changeStation method, it changes the value of the instance variable by the amount specified by the argument.

Part 6: More Mutator Methods
Mutator methods don't always have to take a parameter. Sometimes they modify an instance variable by a constant amount.

Write two more mutator methods nextStation and prevStation. These methods should add (or subtract) the value 0.2 from the instance variable.

To test this code you will have to uncomment some lines in the RadioTester.java file.

Look for the lines

//r.nextStation();
//System.out.println(r.getStation()); // should be 95.9
    
//r.nextStation();
//System.out.println(r.getStation()); // should be 96.1
    
//r.prevStation();
//r.prevStation();
//r.prevStation();
//System.out.println(r.getStation()); // should be 95.5
And remove the // from the beginning of them so they look like this:

r.nextStation();
System.out.println(r.getStation()); // should be 95.9
    
r.nextStation();
System.out.println(r.getStation()); // should be 96.1
    
r.prevStation();
r.prevStation();
r.prevStation();
System.out.println(r.getStation()); // should be 95.5
Now, when you run your code it should output the values

0.0
95.5
96.9
97.1     <-- if this is weird, see video below
97.3     <-- if this is weird, see video below
96.7
Each time the code calls the nextStation method, it adds 0.2 to the instance variable. Each time it calls the prevStation method it subtracts 0.2 from the instance variable.
